name: Deep Debug Base64 Decoding

on:
  workflow_dispatch:

jobs:
  deep-debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deep Analysis of Base64 Decoding
      run: |
        echo "🔍 Deep debugging base64 decoding process..."
        
        # 1. 원본 base64 값 분석
        echo "=== STEP 1: Raw base64 analysis ==="
        echo "SHEETS_KEY raw length: ${#SHEETS_KEY}"
        echo "DRIVE_KEY raw length: ${#DRIVE_KEY}"
        
        # 2. 첫 100자와 마지막 100자 확인
        echo "=== STEP 2: Base64 content inspection ==="
        echo "SHEETS_KEY first 100 chars:"
        echo "$SHEETS_KEY" | head -c 100
        echo ""
        echo "SHEETS_KEY last 100 chars:"
        echo "$SHEETS_KEY" | tail -c 100
        echo ""
        
        # 3. 특수문자 검사
        echo "=== STEP 3: Special character check ==="
        echo "SHEETS_KEY special chars:"
        echo "$SHEETS_KEY" | grep -o '[^A-Za-z0-9+/=]' | sort | uniq -c || echo "No special chars found"
        
        # 4. 정리된 base64로 테스트
        echo "=== STEP 4: Cleaned base64 test ==="
        echo "$SHEETS_KEY" | tr -d ' \n\r\t' > /tmp/sheets_clean.txt
        echo "Cleaned length: $(wc -c < /tmp/sheets_clean.txt)"
        
        # 5. 단계별 디코딩 테스트
        echo "=== STEP 5: Step-by-step decoding ==="
        
        # 5-1. 기본 디코딩
        if base64 -d /tmp/sheets_clean.txt > /tmp/decoded1.json 2>/dev/null; then
          echo "✅ Basic base64 decode: SUCCESS"
          echo "Decoded size: $(wc -c < /tmp/decoded1.json)"
        else
          echo "❌ Basic base64 decode: FAILED"
        fi
        
        # 5-2. 강제 디코딩 (에러 무시)
        base64 -d /tmp/sheets_clean.txt > /tmp/decoded2.json 2>/dev/null || true
        echo "Force decoded size: $(wc -c < /tmp/decoded2.json)"
        
        # 6. 디코딩된 내용 분석
        echo "=== STEP 6: Decoded content analysis ==="
        echo "First 500 chars of decoded content:"
        head -c 500 /tmp/decoded2.json | cat -v
        echo ""
        
        # 7. JSON 구조 분석
        echo "=== STEP 7: JSON structure analysis ==="
        echo "Checking for private_key field..."
        grep -n "private_key" /tmp/decoded2.json || echo "private_key not found"
        
        # 8. 제어 문자 위치 찾기
        echo "=== STEP 8: Control character location ==="
        echo "Finding control characters around char 1868..."
        
        # 1868 근처 내용 확인 (±100자)
        echo "Content around char 1868:"
        dd if=/tmp/decoded2.json bs=1 skip=1768 count=200 2>/dev/null | cat -v
        echo ""
        
        # 9. 라인별 분석
        echo "=== STEP 9: Line-by-line analysis ==="
        echo "Line 5 content (where error occurs):"
        sed -n '5p' /tmp/decoded2.json | cat -v
        echo ""
        
        # 10. 16진수 덤프
        echo "=== STEP 10: Hex dump around error location ==="
        echo "Hex dump of chars 1860-1880:"
        dd if=/tmp/decoded2.json bs=1 skip=1860 count=20 2>/dev/null | hexdump -C
        
        # 정리
        rm -f /tmp/sheets_clean.txt /tmp/decoded1.json /tmp/decoded2.json
        
      env:
        SHEETS_KEY: ${{ secrets.SHEETS_SERVICE_ACCOUNT_KEY }}
        DRIVE_KEY: ${{ secrets.DRIVE_SERVICE_ACCOUNT_KEY }} 