name: Fix Control Character in Service Key

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (true/false)'
        required: false
        default: false
        type: boolean
      limit:
        description: 'Row limit for processing'
        required: false
        default: '50'
        type: string
      generate_graph:
        description: 'Generate graphs (true/false)'
        required: true
        default: false
        type: boolean
  schedule:
    - cron: '0 1 * * 1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create service account files with control character fix
      run: |
        echo "üîß Fixing service account keys with control character removal..."
        mkdir -p config
        
        # Create advanced Python script to fix control characters
        cat > fix_json.py << 'EOF'
        import base64
        import json
        import re
        import sys
        
        def fix_control_characters(text):
            """Remove or replace common control characters that break JSON"""
            # Replace common control characters
            text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)
            
            # Specifically fix the PRIVATE KEY issue
            text = text.replace('PRIVATE\x06KEY', 'PRIVATE KEY')
            text = text.replace('PRIVATE^FKEY', 'PRIVATE KEY')
            
            # Fix any other common issues
            text = text.replace('\r\n', '\n')  # Windows line endings
            text = text.replace('\r', '\n')    # Mac line endings
            
            return text
        
        def process_service_key(env_var_name, output_file):
            try:
                # Get base64 encoded key from environment
                encoded_key = os.environ.get(env_var_name, '')
                if not encoded_key:
                    print(f"‚ùå {env_var_name} not found in environment")
                    return False
                
                # Clean and decode
                cleaned_b64 = ''.join(encoded_key.split())
                decoded_bytes = base64.b64decode(cleaned_b64)
                decoded_text = decoded_bytes.decode('utf-8', errors='replace')
                
                print(f"üîç Original text length: {len(decoded_text)}")
                
                # Fix control characters
                fixed_text = fix_control_characters(decoded_text)
                print(f"üîß Fixed text length: {len(fixed_text)}")
                
                # Try to parse as JSON to validate
                try:
                    json_data = json.loads(fixed_text)
                    print(f"‚úÖ JSON validation successful for {env_var_name}")
                    
                    # Pretty print and save
                    with open(output_file, 'w') as f:
                        json.dump(json_data, f, indent=2)
                    
                    print(f"‚úÖ {output_file} created successfully")
                    return True
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå JSON validation failed for {env_var_name}: {e}")
                    # Save the fixed text anyway for debugging
                    with open(f"{output_file}.debug", 'w') as f:
                        f.write(fixed_text)
                    return False
                    
            except Exception as e:
                print(f"‚ùå Error processing {env_var_name}: {e}")
                return False
        
        if __name__ == "__main__":
            import os
            
            success1 = process_service_key('SHEETS_SERVICE_ACCOUNT_KEY', 'config/sheets-service-account.json')
            success2 = process_service_key('DRIVE_SERVICE_ACCOUNT_KEY', 'config/drive-service-account.json')
            
            if success1 and success2:
                print("üéâ All service account files created successfully!")
                sys.exit(0)
            else:
                print("‚ùå Some service account files failed to create")
                sys.exit(1)
        EOF
        
        # Run the fix script
        python fix_json.py
        
      env:
        SHEETS_SERVICE_ACCOUNT_KEY: ${{ secrets.SHEETS_SERVICE_ACCOUNT_KEY }}
        DRIVE_SERVICE_ACCOUNT_KEY: ${{ secrets.DRIVE_SERVICE_ACCOUNT_KEY }}
        
    - name: Verify JSON files
      run: |
        echo "üîç Verifying created JSON files..."
        for file in config/*.json; do
          if [ -f "$file" ]; then
            echo "üìÑ Checking $file:"
            python -m json.tool "$file" > /dev/null && echo "‚úÖ Valid JSON" || echo "‚ùå Invalid JSON"
            echo "File size: $(wc -c < "$file") bytes"
            echo ""
          fi
        done
        
    - name: Run main script
      run: |
        echo "üöÄ Running main PDA partner script..."
        echo "üìä Test mode: ${{ github.event.inputs.test_mode || 'false' }}"
        echo "üìè Row limit: ${{ github.event.inputs.limit || '50' }}"
        echo "üìà Generate graph: ${{ github.event.inputs.generate_graph || 'false' }}"
        
        # Build command with options
        CMD="python PDA_partner.py"
        
        if [ "${{ github.event.inputs.test_mode || 'false' }}" = "true" ]; then
          CMD="$CMD --test"
          echo "üß™ TEST MODE enabled"
        fi
        
        if [ "${{ github.event.inputs.limit || '50' }}" != "50" ]; then
          CMD="$CMD --limit ${{ github.event.inputs.limit || '50' }}"
          echo "üìè Row limit set to: ${{ github.event.inputs.limit || '50' }}"
        fi
        
        if [ "${{ github.event.inputs.generate_graph || 'false' }}" = "true" ]; then
          echo "üìà Graph generation ENABLED"
        else
          CMD="$CMD --no-graph"
          echo "üìà Graph generation DISABLED"
        fi
        
        echo "üöÄ Executing: $CMD"
        $CMD
      env:
        # Service account keys
        SHEETS_SERVICE_ACCOUNT_KEY: ${{ secrets.SHEETS_SERVICE_ACCOUNT_KEY }}
        DRIVE_SERVICE_ACCOUNT_KEY: ${{ secrets.DRIVE_SERVICE_ACCOUNT_KEY }}
        
        # Email configuration
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
        RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
        SMTP_USER: ${{ secrets.EMAIL_ADDRESS }}
        SMTP_PASSWORD: ${{ secrets.EMAIL_PASS }}
        
        # Other environment variables
        NOVA_FOLDER_ID: ${{ secrets.NOVA_FOLDER_ID }}
        JSON_DRIVE_FOLDER_ID: ${{ secrets.JSON_DRIVE_FOLDER_ID }}
        
    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pda-results-${{ github.run_number }}
        path: |
          output/
          *.json
          *.log
          config/*.debug 